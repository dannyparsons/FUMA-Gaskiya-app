{"version":3,"sources":["../../src/pages/localite/ajouter-pays/ajouter-pays.module.ts","../../src/pages/localite/ajouter-pays/ajouter-pays.ts"],"names":[],"mappings":"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","file":"45.main.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { AjouterPaysPage } from './ajouter-pays';\n\n@NgModule({\n  declarations: [\n    AjouterPaysPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(AjouterPaysPage),\n  ],\n  exports: [\n    AjouterPaysPage\n  ]\n})\nexport class AjouterPaysPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/localite/ajouter-pays/ajouter-pays.module.ts","import { Component } from '@angular/core';\nimport { NavController, NavParams, IonicPage, ToastController, ViewController, MenuController, Events } from 'ionic-angular';\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { PouchdbProvider } from '../../../providers/pouchdb-provider';\n\n/**\n * Generated class for the AjouterPaysPage page.\n *\n * See http://ionicframework.com/docs/components/#navigation for more info\n * on Ionic pages and navigation.\n */\n@IonicPage()\n@Component({\n  selector: 'page-ajouter-pays',\n  templateUrl: 'ajouter-pays.html',\n})\nexport class AjouterPaysPage {\n\n  paysForm: any;\n  pays: any;\n  allPays: any = [];\n  id: any = '';\n  nom: any = '';\n \n  constructor(public navCtrl: NavController, public menuCtl: MenuController, public viewCtrl: ViewController, public navParams: NavParams,public toastCtl: ToastController, public servicePouchdb: PouchdbProvider, public formBuilder: FormBuilder) {\n    this.paysForm = this.formBuilder.group({\n      id:['', Validators.required],\n      nom:['', Validators.required],\n    });\n  }\n\n  ionViewDidEnter() {\n     this.servicePouchdb.getDocById('pays').then((pays) => {\n       this.allPays = pays.data;\n       this.pays = pays;\n       //alert(this.pays._id)\n     })\n  }\n\n  //fait la conbinaison de caractere de gauche vers la droite en variant la taille a la recherche d'un code disponible\n  genererID(){\n    \n    let nom = this.nom;\n     nom = nom.replace(' ' || '  ' || '    ' || '     ' || '      ' , '');\n     let taille_nom = nom.length;\n     let an = nom;\n    //taille initiale: deux aractères\n    let taille_code = 2;\n    let code: string = '';\n    this.id = code.toUpperCase()\n    let p = 0;\n    let last_position = 0;\n    let trouve: boolean;\n\n    if(taille_nom >= 2){\n      while(taille_code <= taille_nom){\n        last_position = taille_code - 1;\n        trouve  = false;\n        code = '';\n        for(let i = 0; i < taille_code; i++){\n          code += nom.charAt(i).toString() ;\n        }\n\n        do{\n            code = code.substr(0, code.length - 1);\n            code += nom.charAt(last_position).toString() ;\n            p = 0;\n            for(let pos=0; pos < this.allPays.length; pos++){\n              let op = this.allPays[pos];\n              if(op.id === code.toUpperCase()){\n                trouve = true;\n                break ;\n              }else{\n                trouve = false;\n              }\n            }\n            \n            last_position++;\n\n          }while(trouve && last_position < taille_nom);\n          //\n          if(last_position === taille_nom && trouve){\n            //non disponible, augmenter la taille du code\n            taille_code++;\n        \n            //au cas ou on teste toutes les combinaisons, sant trouver de combinaison disponible, on ajoute des chiffre\n            if(taille_code > taille_nom){\n              //non disponible, augmenter la taille et utiliser des chiffres\n              taille_code = 3;\n              nom = an + '123456789'.toString();\n              taille_nom = nom.length;\n            }\n          }else{\n              this.id = code.toUpperCase();\n              break;\n            \n          }\n      }\n      \n    }\n    \n  }\n\n   verifierUniqueNon(pays){\n    let res = 1;\n    this.allPays.forEach((p, index) => {\n      if((pays.nom.toString().toUpperCase() === p.nom.toString().toUpperCase())){\n        res = 0;\n      }\n    });\n\n    return res;\n  }\n\n\n  ajouter(){\n    \n    let pays = this.paysForm.value;\n    if(this.verifierUniqueNon(pays) === 0){\n      alert('Les noms des pays doivent être uniques!');\n    }else{\n      let data = [];\n      data = this.pays.data;\n      data.push(pays);\n      this.pays.data = data;\n      this.servicePouchdb.updateLocalite(this.pays);\n      let toast = this.toastCtl.create({\n        message: 'Pays bien enregistré!',\n        position: 'top',\n        duration: 3000\n      });\n\n      toast.present();\n      this.viewCtrl.dismiss();\n    }\n  } \n\n  annuler(){\n     this.viewCtrl.dismiss();\n  }\n\n\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/localite/ajouter-pays/ajouter-pays.ts"],"sourceRoot":""}